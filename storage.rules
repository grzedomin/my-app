rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Function to check if the current user is an admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    // Function to check if request is from Firebase service account
    function isServiceAccount() {
      return request.auth.token.firebase.sign_in_provider == 'custom';
    }
    
    // Default rule - deny access
    match /{allPaths=**} {
      // Allow read access to everyone
      allow read: if true;
      // Allow Firebase service accounts full access
      allow read, write: if isServiceAccount();
      allow option: if true;  // Always allow preflight OPTIONS requests
    }
    
    // Allow authenticated users to write to their own files
    match /betting-files/{userId}/{fileName} {
      // Allow anyone to read files
      allow read: if true;
      
      // Only file owners can write
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // File owners or admins can delete
      allow delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Allow metadata access
      allow get, list: if true;
    }
    
    // Function to validate file uploads
    function isValidFile() {
      // Check if the content type is for Excel files
      return request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') ||
             request.resource.contentType.matches('application/vnd.ms-excel') ||
             request.resource.contentType.matches('application/octet-stream');
    }
  }
} 